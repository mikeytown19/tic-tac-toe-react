{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","concat","value","onClick","calculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","b","c","Board","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Array","fill","xIsNext","slice","setState","_this2","components_Square","handleClick","status","winner","renderSquare","React","Component","Game","components_Board","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAgBeA,MAZf,SAAgBC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OACAC,UAAS,OAAAC,OAASL,EAAMM,OACvBC,QAAS,WACRP,EAAMO,cCmDd,SAASC,EAAgBC,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,KAAAE,EAAAC,OAAAC,EAAA,EAAAD,CACnBJ,EAAMC,GADa,GAC9BT,EAD8BW,EAAA,GAC3BG,EAD2BH,EAAA,GACxBI,EADwBJ,EAAA,GAErC,GAAIJ,EAAQP,IAAMO,EAAQP,KAAOO,EAAQO,IAAMP,EAAQP,KAAOO,EAAQQ,GACpE,OAAOR,EAAQP,GAGnB,OAAO,KAGMgB,kBA7Eb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAO,KAAAH,IACjBC,EAAAL,OAAAQ,EAAA,EAAAR,CAAAO,KAAAP,OAAAS,EAAA,EAAAT,CAAAI,GAAAM,KAAAH,KAAMrB,KACDyB,MAAQ,CACXhB,QAASiB,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJMT,2EASPR,GACV,IAAMF,EAAUY,KAAKI,MAAMhB,QAAQoB,QAC/BrB,EAAgBC,IAAYA,EAAQE,KAGxCF,EAAQE,GAAKU,KAAKI,MAAMG,QAAU,IAAM,IACxCP,KAAKS,SAAS,CACZrB,QAASA,EACTmB,SAAUP,KAAKI,MAAMG,gDAIZjB,GAAG,IAAAoB,EAAAV,KACd,OAAOpB,EAAAC,EAAAC,cAAC6B,EAAD,CACN1B,MAAOe,KAAKI,MAAMhB,QAAQE,GAC1BJ,QAAS,WAAOwB,EAAKE,YAAYtB,uCAKlC,IACIuB,EADEC,EAAS3B,EAAgBa,KAAKI,MAAMhB,SAQ1C,OALEyB,EADEC,EACO,WAAaA,EAEb,iBAAmBd,KAAKI,MAAMG,QAAU,IAAM,KAI5D3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAU8B,GACnBjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZiB,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,YAlDTC,IAAMC,WCcXC,mLAXX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACqC,EAAD,eALSH,IAAMC,WCgBVG,mLAZX,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACuC,EAAD,eAPUJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fdee733c.chunk.js","sourcesContent":["import React from 'react'\nimport { css } from '@emotion/core'\nimport styled from '@emotion/styled'\n\nfunction Square(props){\n    return (\n      <div\n      className={`box ${props.value}`}\n       onClick={()=> {\n        props.onClick();\n       }}\n       >\n       </div>\n    )\n}\n\nexport default Square;","import React from 'react'\nimport Square from './Square'\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    }\n\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'x' : 'o'\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  renderSquare(i) {\n    return <Square\n     value={this.state.squares[i]}\n     onClick={() => {this.handleClick(i)}}\n     />;\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n <div>\n   <h3 className='status'>{status}</h3>\n        <div className=\"container\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n\n      </div>\n </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default Board;","import React from 'react'\nimport Board from './Board'\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1>Tic Tac Toe</h1>\n        <Game />\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}